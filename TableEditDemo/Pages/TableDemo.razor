
@using System.Diagnostics

@namespace TableEditDemo

<div id="" class=""
         style="height: 350px">

    <table id="mytable" class="bbd-table">

        <tbody>

        @for (int row = 0; row <= 10; row++)
            {
                int yearIndex = row;
                <tr>
                <td contenteditable="false" class="RowHeader" style="width: 30px">
                    @BBDAllCellsList[yearIndex][0].Index_Row
                </td>

                @for (int col = 1; col < 5; col++)
                    {
                    int colIndex = col;
                    TableCell bbdCell = BBDAllCellsList[yearIndex][colIndex];

                        @if (bbdCell.CSSClass == enteredData)
                            {
                            <td class="@bbdCell.CSSClass" contenteditable="false" style="width: @colWidth">
                                <input style="width:@colWidth"
                                    class="@bbdCell.CSSClass"
                                    value="@bbdCell.Value_Formatted"
                                    placeholder=""
                                    onFocus="this.select()"
                                    @onchange="@((ChangeEventArgs e) => OnChange(e, bbdCell.Value_Formatted, yearIndex, colIndex))"
                                    @onfocusin="@((FocusEventArgs e) => OnFocusIn(e, yearIndex, colIndex))"
                                    @onfocusout="@((FocusEventArgs e) => OnFocusOut(e, bbdCell.Value_Formatted, yearIndex, colIndex))"
                                    />
                            </td>
                            }
                        else
                            {
                            <td class="@bbdCell.CSSClass" contenteditable="false" style="width: @colWidth">
                                <input style="width:@colWidth"
                                    class="@bbdCell.CSSClass"
                                    value=""
                                    placeholder="@bbdCell.Value_Formatted"
                                    onFocus="this.select()"
                                    @onchange="@((ChangeEventArgs e) => OnChange(e, bbdCell.Value_Formatted, yearIndex, colIndex))"
                                    @onfocusin="@((FocusEventArgs e) => OnFocusIn(e, yearIndex, colIndex))"
                                    @onfocusout="@((FocusEventArgs e) => OnFocusOut(e, bbdCell.Value_Formatted, yearIndex, colIndex))" />
                            </td>
                            }

                    } @*end colIndex*@

            </tr>

            } @*end year*@

        </tbody>
    </table>

</div>

@code 
{
    //<thead>
    //    <tr>
    //        @foreach (TableCell bbdCell in BBDAllCellsList[0])
    //        {
    //        <th class="ColHeader" style="width: @colWidth">
    //            @bbdCell.ColName
    //            <br /> &nbsp
    //        </th>
    //        }
    //    </tr>
    //</thead>


    private List<List<TableCell>> BBDAllCellsList { get; set; } = new List<List<TableCell>>();
    private string colWidth = "75px";
    private string enteredData = "entereddata";
    private string defaultData = "defaultdata";

    protected override void OnInitialized()
        {
        BBDAllCellsList = new List<List<TableCell>>();

        // Create some data
        for (int rowIndex = 0; rowIndex <= 10; rowIndex++)
            {
            List<TableCell> bbdRowCellList = new List<TableCell>();

            for (int colIndex = 0; colIndex < 5; colIndex++)
                {
                TableCell bbdCell = new TableCell();
                bbdCell.Index_Row = rowIndex;
                bbdCell.Index_Col = colIndex;
                bbdCell.ColName = $"Col_{colIndex}";
                bbdCell.Value_Dec = (rowIndex + 1) * 10 + colIndex;
                bbdCell.Value_Formatted = bbdCell.Value_Dec.ToString("C0");
                bbdCell.CSSClass = "defaultdata";

                bbdRowCellList.Add(bbdCell);
                } // next colSpec

            BBDAllCellsList.Add(bbdRowCellList);
            }

        // Make a couple of the cells entered data
        BBDAllCellsList[3][3].CSSClass = enteredData;
        BBDAllCellsList[3][4].CSSClass = enteredData;
        } // OnInitialized

    protected void OnChange(ChangeEventArgs e, string origFormattedValue, int year, int colIndex)
        {
        TableCell bbdCell = BBDAllCellsList[year][colIndex];
        bbdCell.CSSClass = enteredData;
        bbdCell.Value_Dec = int.Parse((string)e.Value);
        bbdCell.Value_Formatted = bbdCell.Value_Dec.ToString("C0");
        Debug.WriteLine($"\nIBBDetail.OnChange: Row/Col({bbdCell.Index_Row}/{bbdCell.Index_Col}) "
        + $"| Orig Value({origFormattedValue}) | New Value({(string)e.Value}) ");

        InvokeAsync(StateHasChanged);
        } // OnChange

    protected void OnFocusIn(FocusEventArgs e, int year, int colIndex)
        {
        TableCell bbdCell = BBDAllCellsList[year][colIndex];

        Debug.WriteLine($"IBBBDetail.OnFocusIn: Row/Col({bbdCell.Index_Row}/{bbdCell.Index_Col}) "
        + $"| Dec Value({bbdCell.Value_Dec}) | Formatted({bbdCell.Value_Formatted})");

        InvokeAsync(StateHasChanged);
        } // OnFocusIn

    protected void OnFocusOut(FocusEventArgs e, string value, int year, int colIndex)
        {
        TableCell bbdCell = BBDAllCellsList[year][colIndex];

        Debug.WriteLine($"IBBBDetail.OnFocusOut: Row/Col({bbdCell.Index_Row}/{bbdCell.Index_Col}) "
            + $"| Dec Value({bbdCell.Value_Dec}) | Formatted({bbdCell.Value_Formatted})");
        } // OnFocusOut

}
